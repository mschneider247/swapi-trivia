{"version":3,"sources":["Components/Form/Form.js","apiCalls/apiCalls.js","Components/Movie/Movie.js","Components/MoviesContainer/MoviesContainer.js","Components/Profile/Profile.js","Components/Menu/Menu.js","Components/ScrollingText/ScrollingText.js","Components/Characters/Characters.js","Components/CharactersContainer/CharactersContainer.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["Form","props","updateFormState","event","setState","target","name","value","errorHandling","state","quote","status","isValid","updateUserState","className","style","visibility","this","type","placeholder","onChange","to","onClick","Component","getMovies","fetch","then","res","json","films","results","map","film","newDate","release_date","split","tenCharacters","characters","slice","title","episode_id","opening_crawl","getCharacterData","characterURL","character","homeworld","species","fecthAllCharacterData","homeworldURL","speciesURL","filmsURL","getHomeworld","getSpecies","getFilms","Promise","all","home","population","Movie","componentDidMount","fetchedCharacters","forEach","charac","url","push","length","waitingForLoad","catch","error","console","movieData","src","alt","updateCurrentCharacters","MoviesContainer","returnRender","moviesCont","movies","movie","id","key","Profile","Menu","path","render","favoriteCharacters","removeUserState","ScrollingText","romanEpisodeID","parseInt","Characters","isFavorited","checkFavoriteStatus","updateFavoriteCharacters","CharactersContainer","index","isFavorite","favorites","App","sort","a","b","userObj","user","currentCharacters","currentMovie","safeToAdd","favorite","favchars","splice","favCharacArray","find","exact","Boolean","window","location","hostname","match","router","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1133c374.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Form.css';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nclass Form extends Component {\n  constructor(props) {\n    super();\n    this.state = {\n      name: '',\n      quote: '',\n      status: '',\n      isValid: false\n    }\n    this.props = props;\n  }\n\n  updateFormState = (event) => {\n    this.setState({ [event.target.name]: event.target.value}, () => {\n      this.errorHandling()\n    });\n  }\n\n  errorHandling = () => {\n    if ((this.state.name !== '') && (this.state.quote !== '') && (this.state.status !== '')) {\n      this.setState(() => ({ isValid: true}));\n      this.props.updateUserState(this.state);\n    } else {\n      this.setState(() => ({ isValid: false}));\n    }\n  }\n\n  render() {\n    return (\n      <main className=\"form\">\n        <p className=\"form-p\" style={{visibility: this.state.isValid ? 'hidden' : 'visible'}}>Please enter values for each input!</p>\n        <input\n          className=\"input-fill\"\n          type=\"text\"\n          placeholder=\"Name\"\n          name=\"name\"\n          value={this.state.name}\n          onChange={event => this.updateFormState(event)}\n        />\n        <input\n          className=\"input-fill\"\n          type=\"text\"\n          placeholder=\"Favorite Quote\"\n          name=\"quote\"\n          value={this.state.quote}\n          onChange={event => this.updateFormState(event)}\n        />\n        <div className=\"input-container\">\n          <label className=\"input-radio\">\n            <input type=\"radio\" name=\"status\" value=\"PADAWAN\" onChange={event => this.updateFormState(event)}/> PADAWAN\n            <span className=\"checkmark\"></span>\n          </label>\n          <label className=\"input-radio\">\n            <input type=\"radio\" name=\"status\" value=\"JEDI\" onChange={event => this.updateFormState(event)}/> JEDI\n            <span className=\"checkmark\"></span>\n          </label>\n          <label className=\"input-radio\">\n            <input type=\"radio\" name=\"status\" value=\"YODA\" onChange={event => this.updateFormState(event)}/> YODA\n            <span className=\"checkmark\"></span>\n          </label>\n        </div>\n        <Link to={this.state.isValid ? \"/movies\" : \"/\"}><button onClick={() => this.props.updateUserState(this.state)}>Submit</button></Link>\n      </main>\n    )\n  }\n}\n\nexport default Form;\n\nForm.propTypes = {\n  updateUserState: PropTypes.func,\n}\n","export const getMovies = () => {\n    return fetch('https://swapi.co/api/films/')\n      .then(res => res.json())\n      .then(films => {\n        return films.results.map((film) => {\n          const newDate = film.release_date.split('-')[0]\n          const tenCharacters = film.characters.slice(0, 10)\n          return {\n            title: film.title,\n            episode_id: film.episode_id,\n            release_date: newDate,\n            characters: tenCharacters,\n            opening_crawl: film.opening_crawl\n          }\n        })\n      })\n  }\n\nexport const getCharacterData = (characterURL) => {\n  return fetch(characterURL)\n    .then(res => res.json())\n    .then(character => {\n      const { name, homeworld, species, films } = character;\n      return fecthAllCharacterData(homeworld, species, films)\n        .then(res => ({name, res}))\n    })\n}\n\nconst fecthAllCharacterData = (homeworldURL, speciesURL, filmsURL) => {\n  const homeworld = getHomeworld(homeworldURL)\n  const species = getSpecies(speciesURL)\n  const films = getFilms(filmsURL)\n  return Promise.all( [homeworld, species, films] )\n}\n\nconst getHomeworld = (homeworldURL) => {\n  return fetch(homeworldURL)\n    .then(res => res.json())\n    .then(homeworld => {\n      return ({\n        home: homeworld.name,\n        population: homeworld.population\n      })\n    })\n}\n\nconst getSpecies = (speciesURL) => {\n  return fetch(...speciesURL)\n    .then(res => res.json())\n    .then(species => {\n      return species.name\n    })\n  }\n\nconst getFilms = (filmsURL) => {\n  const films = filmsURL.map((film) => {\n    return fetch(film)\n      .then(res => res.json())\n      .then(film => film.title)\n  })\n  return Promise.all(films)\n}\n","import React from 'react';\nimport './Movie.css';\nimport { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { getCharacterData } from '../../apiCalls/apiCalls';\nimport PropTypes from 'prop-types';\n\nclass Movie extends Component {\n  constructor(props) {\n    super()\n    this.state = {\n      characters: [],\n      waitingForLoad: true\n    }\n    this.props = props;\n    this.movieData = {\n      episode_id : this.props.episode_id,\n      title: this.props.title,\n      opening_crawl: this.props.opening_crawl\n    }\n  }\n\n  componentDidMount = () => {\n    let fetchedCharacters = [];\n    this.props.characters.forEach((charac) => {\n      getCharacterData(charac)\n        .then(character => {\n          return {\n            name: character.name,\n            homeworld: character.res[0].home,\n            population: character.res[0].population,\n            species: character.res[1],\n            films: character.res[2][0],\n            url: charac\n          }\n        })\n        .then(character => {\n          fetchedCharacters.push(character)\n          if (fetchedCharacters.length === 10) {\n            this.setState({ characters: fetchedCharacters})\n            this.setState({ waitingForLoad: false}) \n          }\n        })\n        .catch(error => console.error('error'))\n    })\n  }\n\n  render() {\n    return (\n      <section>\n        <div className=\"movie-card\">\n          <h3>{this.props.title}</h3>\n          <h4><span className=\"bold-text\">EPISODE</span> {this.props.episode_id}</h4>\n          <h4><span className=\"bold-text\">RELEASE</span> {this.props.release_date}</h4>\n        </div>\n        <div className=\"view-charac\">\n          {this.state.waitingForLoad ?\n          <img src='https://media3.giphy.com/media/hQgJCEdGOEHa8/source.gif' alt=\"loading...\"/> : <Link className=\"link\" to={`movies/${this.props.episode_id}`}><h5 onClick={() => this.props.updateCurrentCharacters(this.state.characters, this.movieData)}>VIEW CHARACTERS</h5></Link>}\n        </div>\n      </section>\n    )\n}\n}\n\nexport default Movie;\n\nMovie.propTypes = {\n  title: PropTypes.string,\n  episode_id: PropTypes.number,\n  release_date: PropTypes.string,\n  id: PropTypes.number,\n  characters: PropTypes.array,\n  updateCurrentCharacters: PropTypes.func,\n  opening_crawl: PropTypes.string,\n}\n","import React from 'react';\nimport Movie from '../Movie/Movie';\nimport './MoviesContainer.css';\nimport PropTypes from 'prop-types';\n\nconst MoviesContainer = ( props ) => {\n\n  const moviesCont = props.movies.map((movie) => {\n    return <Movie\n    title={movie.title}\n    episode_id={movie.episode_id}\n    release_date={movie.release_date}\n    id={movie.episode_id}\n    key={movie.episode_id}\n    characters={movie.characters}\n    updateCurrentCharacters={props.updateCurrentCharacters}\n    opening_crawl={movie.opening_crawl}\n    />\n  })\n\n  let returnRender;\n  if (props.movies.length === 7) {\n    returnRender = moviesCont\n  } else {\n    returnRender = <img src='https://media3.giphy.com/media/hQgJCEdGOEHa8/source.gif' alt=\"loading...\"/>\n  }\n\n  return (\n    <main className=\"movies-container\">\n      {returnRender}\n    </main>\n  )\n}\n\nexport default MoviesContainer;\n\nMoviesContainer.propTypes = {\n  movies: PropTypes.array,\n  user: PropTypes.object,\n  updateCurrentCharacters: PropTypes.func\n}\n","import React from 'react';\nimport './Profile.css';\nimport PropTypes from 'prop-types';\n\nconst Profile = ( { name, quote, status } ) => {\n  return (\n    <section className=\"profile\">\n      <p className=\"profile-p\"><span className=\"bold-text\">NAME </span>{name}</p>\n      <p className=\"profile-p\"><span className=\"bold-text\">QUOTE </span>{quote}</p>\n      <p className=\"profile-p\"><span className=\"bold-text\">STATUS </span>{status}</p>\n    </section>\n  )\n}\n\nexport default Profile;\n\nProfile.propTypes = {\n  name: PropTypes.string,\n  quote: PropTypes.string,\n  status: PropTypes.string\n}\n","import React from 'react';\nimport './Menu.css';\nimport { Route, Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nconst Menu = (props) => {\n\n  return (\n    <nav className=\"menu\">\n      <Route path='/movies' render={() => <h1 className='small-heading'><span className='yellow-text'>SW</span>API</h1>} />\n      <Route path='/favorites' render={() => <h1 className='small-heading'><span className='yellow-text'>SW</span>API</h1>} />\n      <div className=\"favandlog\">\n        <Route path='/movies' render={() => <Link className=\"link\" to='/favorites'><p>{`FAVORITES ${props.favoriteCharacters.length}`}</p></Link>} />\n        <Route path='/favorites' render={() => <Link className=\"link\" to='/favorites'><p>{`FAVORITES ${props.favoriteCharacters.length}`}</p></Link>} />\n        <Route path='/movies' render={() => <Link className=\"link\" to='/'><p onClick={() => props.removeUserState()}>LOGOUT</p></Link>} />\n        <Route path='/favorites' render={() => <Link className=\"link\" to='/'><p onClick={() => props.removeUserState()}>LOGOUT</p></Link>} />\n      </div>\n    </nav>\n  )\n}\n\nexport default Menu;\n\nMenu.propTypes = {\n  removeUserState: PropTypes.func,\n  favoriteCharacters: PropTypes.array,\n}","import React from 'react';\nimport './ScrollingText.css';\nimport PropTypes from 'prop-types';\n\nconst ScrollingText = ( props ) => {\n  let romanNumerals = ['I', 'II', 'III', 'IV', 'V', 'VI', 'VII'];\n  let romanEpisodeID = romanNumerals[parseInt(props.movieData.episode_id) - 1]\n\n  return (\n    <article>\n      <section className=\"scrolling-text\">\n        <div className=\"crawl\">\n          <div className=\"title\">\n           <p>Episode {romanEpisodeID}</p>\n            <h4 className=\"movie-title\">{props.movieData.title}</h4>\n          </div>\n          <p>{props.movieData.opening_crawl}</p>\n        </div>\n      </section>\n    </article>\n  )\n}\n\nexport default ScrollingText;\n\nScrollingText.propTypes = {\n  moveData: PropTypes.object\n}","import React from 'react';\nimport { Component } from 'react';\nimport './Characters.css';\nimport PropTypes from 'prop-types';\n\nclass Characters extends Component {\n  constructor(props){\n    super()\n    this.props = props\n    this.state = {\n      isFavorited: this.props.checkFavoriteStatus(this.props)\n    }\n  }\n\n  render() {\n    return (\n      <section className=\"charac-card\">\n        <div className={this.state.isFavorited ? 'favorite' : 'unfavorite'} onClick={() => {\n          this.props.updateFavoriteCharacters(this.props)\n          this.state.isFavorited ? this.setState({ isFavorited: false}) : this.setState({ isFavorited: true})\n          }}>\n        </div>\n        <h3>{this.props.name}</h3>\n        <h4><span className=\"bold-text\">SPECIES </span>{this.props.species}</h4>\n        <h4><span className=\"bold-text\">HOMEWORLD </span>{this.props.homeworld}</h4>\n        <h4><span className=\"bold-text\">POPULATION </span>{this.props.population}</h4>\n        <h4><span className=\"bold-text\">OTHER MOVIES </span>{this.props.films}</h4>\n      </section>\n    )\n  }\n}\n\nexport default Characters;\n\nCharacters.propTypes = {\n  name: PropTypes.string,\n  id: PropTypes.string,\n  homeworld: PropTypes.string,\n  species: PropTypes.string,\n  films: PropTypes.string,\n  population: PropTypes.string,\n  updateFavoriteCharacters: PropTypes.func,\n  url: PropTypes.string,\n  isFavorite: PropTypes.bool,\n  checkFavoriteStatus: PropTypes.func,\n}\n","import React from 'react'\nimport './CharactersContainer.css';\nimport Characters from '../Characters/Characters'\nimport PropTypes from 'prop-types';\n\nconst CharactersContainer = (props) => {\n  let characters = props.characters.map((character) => {\n    const index = (character.url.split('/')[5])\n    return (<Characters\n      key={index}\n      id={index}\n      name={character.name}\n      homeworld={character.homeworld}\n      species={character.species}\n      films={character.films}\n      population={character.population}\n      updateFavoriteCharacters={props.updateFavoriteCharacters}\n      url={character.url}\n      isFavorite={props.favorites}\n      checkFavoriteStatus={props.checkFavoriteStatus}\n    />\n    )\n  })\n\n  return (\n    <section className=\"charac-container\">\n      {characters.length === 0 ? \n      <div className=\"prompt\">\n        <p className=\"favorite-que\">Favorite characters</p>\n        <div className=\"heart\"></div>\n        <p className=\"favorite-que\">to see them here!</p>\n      </div> : null}\n      {characters}\n    </section>\n  )\n}\n\nexport default CharactersContainer;\n\nCharactersContainer.propTypes = {\n  characters: PropTypes.array,\n  updateFavoriteCharacters: PropTypes.func,\n  favorites: PropTypes.bool,\n  checkFavoriteStatus: PropTypes.func,\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport Form from '../Form/Form';\nimport MoviesContainer from '../MoviesContainer/MoviesContainer';\nimport Profile from '../Profile/Profile';\nimport Menu from '../Menu/Menu';\nimport ScrollingText from '../ScrollingText/ScrollingText';\nimport  { Route } from 'react-router-dom';\nimport CharactersContainer from '../CharactersContainer/CharactersContainer';\nimport { getMovies } from '../../apiCalls/apiCalls';\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      user: null,\n      movies: [],\n      currentMovie: {},\n      currentCharacters: [],\n      favoriteCharacters: []\n    }\n  }\n\n  componentDidMount = () => {\n   getMovies()\n     .then(films => films.sort((a, b) => parseInt(a.episode_id) - parseInt(b.episode_id)))\n     .then(films => this.setState({movies: films}))\n     .catch(error => console.error('error'))\n  }\n\n  updateUserState = (userObj) => {\n    this.setState({ user: userObj })\n  }\n\n  updateCurrentCharacters = (characters, movieData) => {\n    this.setState({ currentCharacters : characters });\n    this.setState({ currentMovie : movieData });\n  }\n\n  updateFavoriteCharacters = (character) => {\n    let safeToAdd = true;\n    this.state.favoriteCharacters.forEach((favorite, index) => {\n      if (favorite.id === character.id) {\n        safeToAdd = false;\n        let favchars = this.state.favoriteCharacters;\n        favchars.splice(index, 1);\n        this.setState( { favoriteCharacters: favchars})\n      }\n    });\n    if (safeToAdd === true) {\n      const favCharacArray = [...this.state.favoriteCharacters]\n      favCharacArray.push(character)\n      this.setState({ favoriteCharacters: favCharacArray })\n    }\n  }\n  \n  checkFavoriteStatus = (character) => {\n    return this.state.favoriteCharacters.find(favorite => favorite.id === character.id)\n  }\n\n  removeUserState = () => {\n    this.setState({\n      user: null\n    })\n  }\n\n  render() {\n    return(\n      <section className='App'>\n        <Route path='/movies' render={() => <Menu removeUserState={this.removeUserState} favoriteCharacters={this.state.favoriteCharacters}/>} />\n        <Route exact path='/favorites' render={() => <Menu removeUserState={this.removeUserState} favoriteCharacters={this.state.favoriteCharacters}/>} />\n        <Route exact path='/' render={() => <h1><span className='yellow-text'>SW</span>API</h1>} />\n        <Route exact path='/' render={() => <Form updateUserState={this.updateUserState}/>} />\n        <Route path='/movies' render={() => <Profile name={this.state.user.name} quote={this.state.user.quote} status={this.state.user.status}/>} />\n        <Route path='/favorites' render={() => <Profile name={this.state.user.name} quote={this.state.user.quote} status={this.state.user.status}/>} />\n        <Route exact path='/movies' render={() => <h2>EPISODES</h2>} />\n        <Route exact path='/movies/:id' render={() => <ScrollingText movieData={this.state.currentMovie}/>} />\n        <Route exact path='/movies/:id' render={() => <h2>CHARACTERS</h2>} />\n        <Route exact path='/movies' render={() => <MoviesContainer movies={this.state.movies} user={this.state.user} updateCurrentCharacters={this.updateCurrentCharacters}/>} />\n        <Route exact path='/favorites' render={() => <h2>FAVORITES</h2>} />\n        <Route exact path='/favorites' render={() => <CharactersContainer characters={this.state.favoriteCharacters} updateFavoriteCharacters={this.updateFavoriteCharacters} favorites={true} checkFavoriteStatus={this.checkFavoriteStatus}/>} />\n        <Route exact path='/movies/:episode_id' render={() => {\n          return (\n            <div>\n              <CharactersContainer characters={this.state.currentCharacters} updateFavoriteCharacters={this.updateFavoriteCharacters} favorites={false} checkFavoriteStatus={this.checkFavoriteStatus}/>\n            </div>\n          )\n        }}\n        />\n      </section>\n    )\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter as Router } from 'react-router-dom';\n\nconst router = (\n  <Router>\n    <App />\n  </Router>\n)\n\nReactDOM.render(router, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}